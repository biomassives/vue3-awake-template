<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Eco Ops App</title>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
  <link rel="stylesheet" href="https://unpkg.com/leaflet-draw@1.0.4/dist/leaflet.draw.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
  <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
  <script src="https://unpkg.com/leaflet-draw@1.0.4/dist/leaflet.draw.js"></script>
  <script src="https://unpkg.com/@turf/turf"></script>
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body class="bg-gray-100 p-8">
  <div id="app" class="max-w-2xl mx-auto bg-white p-8 rounded shadow">
    <h1 class="text-2xl font-semibold mb-4">Eco Ops App</h1>

    <!-- Leaflet Map -->
    <div id="map" class="w-full mb-4"></div>

    <!-- Geolocation Button -->
    <button id="geolocate" class="bg-blue-500 text-white p-2 rounded mb-4">Geolocate</button>

    <!-- Supabase Form -->
    <div class="mt-4">
      <h2 class="text-xl font-semibold mb-2">Submit Check-in</h2>
      <form id="supabaseForm">
        <label for="name" class="block mb-2">Name</label>
        <input type="text" id="name" name="name" class="w-full mb-4 p-2 border rounded">

        <!-- ... (other form fields) -->

        <label for="coordinates" class="block mb-2">Coordinates (Latitude, Longitude)</label>
        <input type="text" id="coordinates" name="coordinates" class="w-full mb-4 p-2 border rounded" readonly>

        <button type="submit" class="bg-blue-500 text-white p-2 rounded">Submit</button>
      </form>
    </div>
  </div>

  <script>
    // Initialize Leaflet map
    const map = L.map('map').setView([0, 0], 2); // Default view, you may adjust this

    // Add OpenStreetMap layer
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);

    // Create a feature group
    const featureGroup = L.featureGroup().addTo(map);

    // Leaflet Draw control (for drawing points and polygons)
    const drawControl = new L.Control.Draw({
      draw: {
        marker: true,
        polygon: true,
        polyline: false,
        rectangle: false,
        circle: false,
      },
      edit: {
        featureGroup: featureGroup,
        edit: false,
        remove: false,
      },
    });

    map.addControl(drawControl);

    // Add drawn features to the feature group
    map.on('draw:created', function (e) {
      featureGroup.addLayer(e.layer);
      updateCoordinatesField();
    });

    // Geolocation button event
    document.getElementById('geolocate').addEventListener('click', function () {
      navigator.geolocation.getCurrentPosition(function (position) {
        map.setView([position.coords.latitude, position.coords.longitude], 13);
        updateCoordinatesField();
      });
    });

    // Update the coordinates field with current map center
    function updateCoordinatesField() {
      const center = map.getCenter();
      document.getElementById('coordinates').value = `${center.lat.toFixed(6)}, ${center.lng.toFixed(6)}`;
    }

    // Form submission event
    document.getElementById('supabaseForm').addEventListener('submit', async function (event) {
      event.preventDefault();

      const formData = new FormData(event.target);
      const checkinDetails = {
        name: formData.get('name'),
        // ... (add other form fields)
        coordinates: document.getElementById('coordinates').value,
      };

      // Store metadata on IPFS using NFT.Storage
      const ipfsResponse = await storeMetadataOnIPFS(checkinDetails);

      // If successful, you can handle the response, e.g., store the IPFS hash in a database
      console.log('IPFS Response:', ipfsResponse);
    });

    // Function to store metadata on IPFS using NFT.Storage
    async function storeMetadataOnIPFS(metadata) {
      try {
        const response = await axios.post('https://api.nft.storage/upload', JSON.stringify(metadata), {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer YOUR_NFT_STORAGE_API_KEY', // Replace with your NFT.Storage API key
          },
        });

        return response.data;
      } catch (error) {
        console.error('Error storing metadata on IPFS:', error);
        throw error;
      }
    }
  </script>
</body>
</html>

